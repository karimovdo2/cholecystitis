# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# app.py ‚Äì –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ —Ä–∏—Å–∫–∞ —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import json, pickle, pathlib, warnings

import numpy as np
import pandas as pd
import shap
import streamlit as st
from catboost import CatBoostClassifier
import matplotlib.pyplot as plt

# ‚ñë‚ñë‚ñë‚ñë  –±–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏  ‚ñë‚ñë‚ñë‚ñë
THIS_DIR = pathlib.Path(__file__).parent.resolve()

# ‚ñë‚ñë‚ñë‚ñë  Streamlit: –∫–æ–Ω—Ñ–∏–≥ –∏ CSS  ‚ñë‚ñë‚ñë‚ñë
st.set_page_config("–ü—Ä–æ–≥–Ω–æ–∑ —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞", "ü©∫", layout="centered")

st.markdown(
    """
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
html,body,[class*="css"]{font-family:'Inter',sans-serif;}
body{
  background:linear-gradient(135deg,#6366f1 0%,#7c3aed 50%,#ec4899 100%);
  min-height:100vh;
}
/* –¥–µ–ª–∞–µ–º ¬´–∫–∞—Ä—Ç–æ—á–∫—É¬ª –∏–∑ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
section.main > div:first-child{
  background:rgba(255,255,255,0.85);
  backdrop-filter:blur(14px);
  border-radius:1.25rem;
  box-shadow:0 10px 25px rgba(0,0,0,.15);
  padding:2.2rem 3rem;
  margin:2.5rem auto;
  max-width:720px;
}
h1.title{font-size:2rem;font-weight:700;text-align:center;margin-bottom:1.4rem;}
.subtitle{font-size:1.05rem;font-weight:600;margin:1.2rem 0 .3rem;}
.stButton>button{
  width:100%;height:3rem;border:none;border-radius:.65rem;
  font-weight:600;color:#fff;
  background:linear-gradient(90deg,#6366f1 0%,#7c3aed 100%);
  transition:background .2s;
}
.stButton>button:hover{background:#6366f1;}
</style>""",
    unsafe_allow_html=True,
)

# ‚ñë‚ñë‚ñë‚ñë  –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ—á–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  ‚ñë‚ñë‚ñë‚ñë
@st.cache_resource(show_spinner=False)
def load_artifacts():
    model = CatBoostClassifier()
    model.load_model(THIS_DIR / "catboost_gb17.cbm")

    enc_map = json.loads((THIS_DIR / "enc_map.json").read_text("utf-8"))
    medians = pickle.loads((THIS_DIR / "medians.pkl").read_bytes())

    explainer = shap.TreeExplainer(model)
    return model, enc_map, medians, explainer


clf, ENC_MAP, MEDIANS, EXPL = load_artifacts()

# ‚ñë‚ñë‚ñë‚ñë  —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤  ‚ñë‚ñë‚ñë‚ñë
FEATURES = [
    "–°—Ç–µ–ø–µ–Ω—å —Ñ–∏–±—Ä–æ–∑–∞ –ø–æ —ç–ª–∞—Å—Ç–æ–º–µ—Ç—Ä–∏–∏",
    "1 –±–ª–æ–∫ - –ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è",
    "St-index - –∏–Ω–¥–µ–∫—Å —Å—Ç–µ–∞—Ç–æ–∑–∞ ( –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏, –°–î)",
    "—ç–∫—Å—Ç–µ—Ä–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
    "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ 1-2 —Ä–∞–∑–∞ -1, 3 —Ä–∞–∑–∞ -2, 4 –∏ –±–æ–ª–µ–µ —Ä–∞–∑ -3",
    "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç—è–≥–æ—â–µ–Ω–∞ —É –±–ª–∏–∑–∫–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ –•–ù–•-1, –ñ–ö–ë-2, —Ü–∏—Ä—Ä–æ–∑ –ø–µ—á–µ–Ω–∏-3, —Ö—Ä.–≥–µ–ø–∞—Ç–∏—Ç-4",
    "–û–î–ê23+ ",
    "2 –±–ª–æ–∫ - –∏–Ω—Ç—Ä–∞–ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è –Ω–∞—Ä–ø–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –±–æ–ª–µ–∑–Ω—å",
    "–û–±—â–∏–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω",
    "–°—Ç–µ–ø–µ–Ω—å —Å—Ç–µ–∞—Ç–æ–∑–∞ –ø–æ —ç–ª–∞—Å—Ç–æ–º–µ—Ç—Ä–∏–∏",
    "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–∞-1, –Ω–µ—Ç-0",
    "TyG - —Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã- –≥–ª—é–∫–æ–∑–∞",
    "FIB-4 - –∏–Ω–¥–µ–∫—Å —Ñ–∏–±—Ä–æ–∑–∞ –ø–µ—á–µ–Ω–∏ ( –≤–æ–∑—Ä–∞—Å—Ç, –ê–õ–¢, –ê–°–¢, —Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã)",
    "HSI - –∏–Ω–¥–µ–∫—Å —Å—Ç–µ–∞—Ç–æ–∑–∞ –ø–µ—á–µ–Ω–∏ ( –ø–æ–ª, –ò–ú–¢, –ê–õ–¢, –ê–°–¢, –°–î)",
    "–ò–ú–¢",
    "–¢—Ä–µ–≤–æ–≥–∞",
    "–ï-—Å–∏–≥–∞—Ä–µ—Ç—ã",
]
CATEGORICAL = {k: list(v.keys()) for k, v in ENC_MAP.items()}

# ‚ñë‚ñë‚ñë‚ñë  –§–û–†–ú–ê  ‚ñë‚ñë‚ñë‚ñë
st.markdown('<h1 class="title">ü©∫ –û–ø—Ä–æ—Å–Ω–∏–∫ —Ä–∏—Å–∫–∞ —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞</h1>',
            unsafe_allow_html=True)

user_vals, typed_flag = {}, {}
with st.form("input_form"):

    for feat in FEATURES:
        # –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown(f'<div class="subtitle">{feat}</div>', unsafe_allow_html=True)

        if feat in CATEGORICAL:  # ----- –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ
            choice = st.selectbox(
                "–≤—ã–±–æ—Ä",                     # label –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
                options=CATEGORICAL[feat],
                key=feat,
                label_visibility="collapsed",
            )
            user_vals[feat] = choice
            typed_flag[feat] = True

        else:                     # ----- —á–∏—Å–ª–æ–≤—ã–µ
            med = float(MEDIANS.get(feat, 0.0))
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º ¬±3œÉ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´–Ω–∞ –≥–ª–∞–∑¬ª (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã)
            span = 3 * (abs(med) if med else 1) + 10
            vmin, vmax = med - span, med + span
            val = st.slider(
                "—á–∏—Å–ª–æ",
                min_value=float(vmin),
                max_value=float(vmax),
                value=med,
                step=0.1,
                key=feat,
                label_visibility="collapsed",
            )
            user_vals[feat] = val
            typed_flag[feat] = val != med

    submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

# ‚ñë‚ñë‚ñë‚ñë  –ò–ù–§–ï–†–ï–ù–°  ‚ñë‚ñë‚ñë‚ñë
if submitted:
    row = []
    for feat in FEATURES:
        v = user_vals[feat]
        if feat in ENC_MAP:         # —Å—Ç—Ä–æ–∫–∞ ‚Üí —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥
            v = ENC_MAP[feat][v]
        elif not typed_flag[feat]:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ç—Ä–æ–≥–∞–ª ‚Üí –º–µ–¥–∏–∞–Ω–∞
            v = MEDIANS.get(feat, 0.0)
        row.append(v)

    df = pd.DataFrame([row], columns=FEATURES)
    prob = float(clf.predict_proba(df)[:, 1])

    st.markdown(f"### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞: **{prob:.3f}**")
    if prob >= 0.5:
        st.error("üí° –ú–æ–¥–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞.")
    else:
        st.success("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç–∞, –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    # ‚ñë‚ñë‚ñë‚ñë  SHAP-–±–∞—Ä  ‚ñë‚ñë‚ñë‚ñë
    with st.spinner("–°—á–∏—Ç–∞–µ–º –≤–∫–ª–∞–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤‚Ä¶"):
        shap_values = EXPL(df)
        top_idx = np.argsort(np.abs(shap_values.values[0]))[::-1][:3]

        st.markdown("#### –¢—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞")
        for i in top_idx:
            st.write(f"- **{FEATURES[i]}** ‚Äî –≤–∫–ª–∞–¥ {shap_values.values[0, i]:+0.3f}")

        # —Ä–∏—Å—É–µ–º bar-plot
        plt.close("all")                              # –≥–∞—Å–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∏–≥—É—Ä—ã
        fig = shap.plots.bar(shap_values, show=False) # fig ‚Äì matplotlib.figure.Figure
        st.pyplot(fig)
